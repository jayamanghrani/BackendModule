package collectionInterface;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class C2_HashSetExample {

	public static void main(String[] args)
	{
		/*java 2 onwards
		 * You use a set when you don’t want to allow duplicate entries
		 * IN hashset, No sorting
		 * use when we want more efficient searching and retreival of data
		 * it uses equal() and hashcode() to check duplicate enteries
		 * Only 1 null can conatin
		 * Objects that you insert in HashSet are not guaranteed to be inserted in the same order.
		 *  Objects are inserted based on their hash code.
		 *  
		 *  
		 *  Before storing an Object, 
		 *  HashSet checks whether there is an existing entry using hashCode() and equals() methods.
		 * 
		 * requires less memory than other 2 classes
		 */
		
		
		Set<Integer> s= new HashSet<Integer>();
		
	System.out.println(s.add(66)); // true
	System.out.println(s.add(8)); // true
	System.out.println(s.add(10)); // true
	System.out.println(s.add(66)); // false
	System.out.println(s.add(25)); // true
	System.out.println(s.add(15)); // true
	System.out.println(s.add(35)); // true
	
	System.out.println(s.add(null)); // true , 1 null value is allowed
	System.out.println(s.add(null));  // false
	
	
	
	s.remove(15);
System.out.println("Size of set is -"+s.size());
	
	
System.out.println("Iterating the Hashset---------");
	Iterator<Integer> itr= s.iterator();
	while(itr.hasNext())
	{
		System.out.print(itr.next()+" ");
	}
	

	
	System.out.println("printing heterogeneous element");
	
	Set hetro = new HashSet();
	hetro.add(15);
	hetro.add("abc");
	hetro.add(20.5);
	
	System.out.println(hetro);
	
	System.out.println("printed heterogeneous element");
	
	
	}
	
}




/*hashCode() returns an integer value, generated by a hashing algorithm.
Objects that are equal (according to their equals()) must return the same hash code.
		Different objects do not need to return different hash codes.*/
				
		 /*	Hashing

		Hashing is a process of converting an object into integer form by using the method hashCode().
		Its necessary to write hashCode() method properly for better performance of HashMap. 	
		*/	

/*Example: This is demo example , don't override like this in code
	  @Override
	  public int hashCode() 
	  {
	     return (int)key.charAt(0);
	  }
*/

/*		Here overrided hashCode() method returns the first character’s ASCII value as hash code.
		So whenever the first character of key is same, the hash code will be same.*/

/*It is just for demo purpose. As HashSet/HashMap also allows 1null key, so hash code of null will always be 0.*/

